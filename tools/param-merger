#!/usr/bin/env python

# param-merger
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

__author__ = 'Sabha Parameswaran'

import argparse
import yaml
import re, sys
import traceback

input_param_file = None
target_param_file = None
merged_param_file = None
merge_prefix = ''


def init():
    parser = argparse.ArgumentParser()
    parser.add_argument('target_param_file', type=str,
        help='path to the target param yml file that has templated values')
    parser.add_argument('input_param_file', type=str,
        help='path to the user filled input param yml file')
    parser.add_argument('merged_param_file', type=str,
        help='path to the merged params yml output file')
    #parser.add_argument('merge_prefix', type=str, default='',
    #   help='prefix to add to input params to match against target param')
    return parser.parse_args()

def main():
    global input_param_file, target_param_file, merged_param_file, merge_prefix

    args = init()
    input_param_file = args.input_param_file
    target_param_file = args.target_param_file
    merged_param_file = args.merged_param_file
    #merge_prefix = args.merge_prefix if args.merge_prefix else ''

    merge()

def merge():

    try:
        input_param_config = read_config(input_param_file)
        #print 'Got input params: {}'.format(input_param_config)

        data = None
        with open(target_param_file, 'r') as target_file:
            data = target_file.read()


        # Special handling of the azs - do it first before proceeding with replacing the tokens
        data = handle_azs(data, input_param_config)
        print 'Data after handle azs' 
        print data

        for key in input_param_config:
            string_to_replace = '((%s%s))' % (merge_prefix, key)
            value = input_param_config.get(key)
            if value is not None:
                if type(value) != str and type(value) != unicode:
                    data = data.replace( string_to_replace, str(value).encode('utf-8'))
                else:
                    data = data.replace( string_to_replace, value)

        # Special handling of the start and end of the external ip pool
        data = handle_external_ip_pool(data, input_param_config)

        # Special handling of the clusters based on azs
        data = handle_clusters(data, input_param_config)

        check_missing_params(data)

        outputfile = open(merged_param_file, 'w')
        outputfile.write(str(data))
    except Exception as e1:
        traceback.print_exc(e1)
        print >> sys.stderr, 'Problem with file handling: {}'.format(e1)
        sys.exit(1)

def handle_external_ip_pool(data_payload, input_param_config):
    external_pool_start = '((%snsx_t_external_ip_pool_start))' % (merge_prefix)
    external_pool_end = '((%ssnsx_t_external_ip_pool_end))' % (merge_prefix)

    data_payload.replace( external_pool_start, input_param_config.get('nsx_t_external_ip_pool_start') )
    data_payload.replace( external_pool_end, input_param_config.get('nsx_t_external_ip_pool_end') )

    return data_payload

def handle_azs(data_payload, input_param_config):
    use_single_az = input_param_config.get('use_single_az')

    # use_single_az: true      # Would use only az_1, ignore rest of the azs
    # az_1_cluster: Cluster1
    # # Ignore the rest of the azs field if only using single az
    # az_2_cluster: Cluster2
    # az_3_cluster: Cluster3

    if not use_single_az or use_single_az == 'false' or str(use_single_az) == 'False':
        return data_payload

    # Mark the az_2 and az_3 as empty 
    data_payload = data_payload.replace('((az_2_cluster))', '').replace('((az_3_cluster))', '') 
    data_payload = data_payload.replace('az_2_name: az2', 'az_2_name:').replace('az_3_name: az3', 'az_3_name:') 
    data_payload = re.sub(',az2,az3', '', data_payload) 
    
    print 'Data payload\n' + data_payload

    return data_payload

def handle_clusters(data_payload, input_param_config):
    use_single_az = input_param_config.get('use_single_az')
    if not use_single_az or use_single_az == 'false' or str(use_single_az) == 'False':
        return data_payload

    cluster_for_az1 = input_param_config.get('az_1_cluster')
    pattern_to_replace = '%s,.*' % cluster_for_az1
    data_payload = re.sub(pattern_to_replace, cluster_for_az1, data_payload)

    return data_payload

def check_missing_params(data):

    for param in re.findall(r'(\(\(.*\)\))', data):
        print 'Missing input for Parameter: ' + param

    for param in re.findall(r'({{.*}})', data):
        print 'Missing input for Parameter: ' + param

def read_config(input_file):
    try:
        with open(input_file) as config_file:
            yamlcontent = yaml.safe_load(config_file)
            return yamlcontent
    except IOError as e:
        print >> sys.stderr, 'Not a yaml config file.'
        sys.exit(1)

def read_as_string(input_file):
    try:
        with open(input_file) as config_file:
            yamlcontent = yaml.safe_load(config_file)
            return yamlcontent
    except IOError as e:
        print >> sys.stderr, 'Not a yaml config file.'
        sys.exit(1)

def write_config(content, destination):
    try:
        with open(destination, 'w') as output_file:
            yaml.dump(content, output_file,  Dumper=NoAliasDumper)

    except IOError as e:
        print('Error : {}'.format(e))
        print >> sys.stderr, 'Problem with writing out a yaml file.'
        sys.exit(1)

class NoAliasDumper(yaml.Dumper):
    def ignore_aliases(self, data):
        return True

if __name__ == '__main__':
    main()
